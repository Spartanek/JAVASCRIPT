// Метод map в JavaScript використовується для створення нового масиву шляхом виклику функції з кожним елементом масиву. Якщо при використанні методу map у вас вийшов список із true або false, це означає, що функція, яку ви передали до map, повертає булеві значення (true або false).

// Чому так сталося?
// Якщо ми розглянемо ваш код:

// javascript
// Copy code
const getUsersWithEyeColor1 = (korystuvachi, color) => {
  const usersWithEyeColor = korystuvachi.map((user) => user.eyeColor === color);
  return usersWithEyeColor;
};
// У цьому коді:

// Ви використовуєте метод map, який створює новий масив, виконуючи вказану функцію для кожного елемента масиву korystuvachi.
// Функція (user) => user.eyeColor === color повертає true або false для кожного користувача, в залежності від того, чи збігається значення eyeColor з вказаним кольором (color).
// Отже, якщо user.eyeColor === color, результатом буде true, інакше — false. Таким чином, новий масив usersWithEyeColor міститиме список булевих значень, відповідних перевіркам кольорів очей кожного користувача.

// Правильний метод для фільтрації
// Щоб отримати масив об'єктів користувачів, у яких є потрібний колір очей, вам слід використовувати метод filter замість map. Метод filter повертає новий масив, який містить лише ті елементи, які задовольняють умові.

// Ось виправлений код:
// javascript
// Copy code
const getUsersWithEyeColor = (korystuvachi, color) => {
  const usersWithEyeColor = korystuvachi.filter(
    (user) => user.eyeColor === color
  );
  return usersWithEyeColor;
};
// Цей код:

// Використовує метод filter, щоб пройтися по всіх користувачах (korystuvachi).
// Повертає лише тих користувачів, де user.eyeColor дорівнює вказаному кольору (color).
// Висновок
// Метод map застосовується, коли потрібно перетворити кожен елемент масиву, тоді як filter використовується, коли потрібно відібрати лише ті елементи, які відповідають певній умові. У вашому випадку, для фільтрації користувачів за кольором очей правильніше використовувати filter.
