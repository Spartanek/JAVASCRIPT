// 1. –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –æ–±'—î–¥–Ω—É—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å—Å–∏–≤–∞ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫. –ï–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –ù–µ—Ö–∞–π –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å—Å–∏–≤–∞ –≤ —Ä—è–¥–∫—É –±—É–¥—É—Ç —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–æ—é.
const friends = ["Mango", "Poly", "Kiwi", "Ajax"];
let string = "";

// üëâ –°–ø–æ—á–∞—Ç–∫—É —á–µ—Ä–µ–∑ for
for (let i = 0; i < friends.length; i++) {
  console.log(friends[i]);
  // —Ç–æ–±—Ç–æ —Ü–µ–π –∑–∞–ø–∏—Å –Ω–µ –ø—Ä–∞—Ü—é—î?
  string = friends[i] + ",";
  // –∞ —Ü–µ–π –ø—Ä–∞—Ü—é—î?
  string = string + friends[i] + ",";
  // Mango,Ajax
  //   string += element[i];
  // —Ö–º, –≤–∏–≤–µ–ª–æ Mowx

  // for (let i = 0; i < friends.length; i++) {
  //   string += friends[i];
  //   if (i < friends.length - 1) {
  //     string += ", ";
  //   }
  // }
}

console.log(string);
// üëâ –ü–æ—Ç—ñ–º —á–µ—Ä–µ–∑ join()
console.log(friends.join(","));

// 2. –ü—Ä–∞—Ü—é—î–º–æ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –∫–∞—Ä—Ç–æ–∫ –≤ trello. –ú–µ—Ç–æ–¥ splice() (–º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏)
const cards = [
  "–ö–∞—Ä—Ç–æ—á–∫–∞-1",
  "–ö–∞—Ä—Ç–æ—á–∫–∞-2",
  "–ö–∞—Ä—Ç–æ—á–∫–∞-3",
  "–ö–∞—Ä—Ç–æ—á–∫–∞-4",
  "–ö–∞—Ä—Ç–æ—á–∫–∞-5",
];
console.log(cards);
// –ü–∞—Ä–∞–º–µ—Ç—Ä begin –≤–∏–∑–Ω–∞—á–∞—î —ñ–Ω–¥–µ–∫—Å, –∑ —è–∫–æ–≥–æ —Å–ª—ñ–¥ –ø–æ—á–∏–Ω–∞—Ç–∏ –≤–∏—Ç—è–≥.
// –ü–∞—Ä–∞–º–µ—Ç—Ä end, –≤–∏–∑–Ω–∞—á–∞—î —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞, –Ω–∞ —è–∫–æ–º—É —Å–ª—ñ–¥ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –≤–∏—Ç—è–≥. –ú–µ—Ç–æ–¥ slice –Ω–µ –≤–∫–ª—é—á–∞—î –µ–ª–µ–º–µ–Ω—Ç –∑ —ñ–Ω–¥–µ–∫—Å–æ–º end —É –≤–∏—Ç—è–≥–Ω—É—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏.
const cardsCopy = cards.slice();
// const cardsCopy = cards.slice(0, cards.length);

// 3. –í–∏–¥–∞–ª–∏—Ç–∏
// –í–∏–¥–∞–ª–µ–Ω–Ω—è (–ø–æ —ñ–Ω–¥–µ–∫—Å—É), –º–µ—Ç–æ–¥ indexOf()
const cardToRemove = "–ö–∞—Ä—Ç–æ—á–∫–∞-3";
for (let j = 0; j < cardsCopy.length; j++) {
  const element = cardsCopy[j];
  if (element === cardToRemove) {
    let findElement = cardsCopy.indexOf(element);
    console.log(findElement);
    cardsCopy.splice(findElement, 1);
  }
}
console.log(`–ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ${cardsCopy}`);
//  –î–æ–¥–∞–≤–∞–Ω–Ω—è (–ø–æ —ñ–Ω–¥–µ–∫—Å—É)
const cardToInsert = "–ö–∞—Ä—Ç–æ—á–∫–∞-6";
for (let r = 0; r < cardsCopy.length; r++) {
  const element = cardsCopy[r];
  if (element !== cardToInsert) {
    // cardsCopy.push(cardToInsert);
    // —è–∫—â–æ –Ω–∞–ø–∏—à—É length-1, —Ç–æ –ø–æ–∑–∞–¥—É 5. –Ø –≤—Å–µ–æ–¥–Ω–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤, –≤–æ–Ω–æ –∂ –ø–æ —ñ–Ω–¥–µ–∫—Å—É –ø–æ–≤–∏–Ω–Ω–æ —Å—Ç–∞–≤–∏—Ç–∏—Å—å
    cardsCopy.splice(cardsCopy.length, 0, cardToInsert);
    break;
  }
}
console.log(`–ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è ${cardsCopy}`);
//  –û–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø–æ —ñ–Ω–¥–µ–∫—Å—É)
const cardToUpdate = "–ö–∞—Ä—Ç–æ—á–∫–∞-4";
for (let y = 0; y < cardsCopy.length; y++) {
  const element = cardsCopy[y];
  if (element === cardToUpdate) {
    let findElement = cardsCopy.indexOf(element);
    console.log(findElement);
    cardsCopy.splice(findElement, 1, "–ó–º—ñ–Ω–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞-4");
  }
}
console.log(`–ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è ${cardsCopy}`);
